var documenterSearchIndex = {"docs":
[{"location":"api/#API-Reference","page":"API Reference","title":"API Reference","text":"","category":"section"},{"location":"api/#screen_molecules","page":"API Reference","title":"screen_molecules","text":"","category":"section"},{"location":"api/#MoleculeScreen.screen_molecules","page":"API Reference","title":"MoleculeScreen.screen_molecules","text":"screen_molecules(mol::Molecule;\n                property_filters::Vector{Symbol}=[:lipinski],\n                smarts_filters::Vector{String}=[\"pains\"]) -> Dict\n\nComprehensive screening of a molecule using both property-based and SMARTS-based filters.\n\nArguments\n\nmol::Molecule: Molecule to screen\nproperty_filters::Vector{Symbol}: Property-based filters to apply\nsmarts_filters::Vector{String}: SMARTS-based filters to apply\n\nReturns\n\nDict: Results containing both property and SMARTS filter results, plus overall pass/fail\n\nExamples\n\nmol = mol_from_smiles(\"CCO\")  # Ethanol\nresults = screen_molecules(mol)\n# Returns comprehensive screening results\n\n# Custom filtering\nresults = screen_molecules(\n    mol; property_filters = [:lipinski, :veber], smarts_filters = [\"pains\", \"brenk\"]\n)\n\n\n\n\n\nscreen_molecules(mols::Vector{Union{Molecule,Missing}};\n                property_filters::Vector{Symbol}=[:lipinski],\n                smarts_filters::Vector{String}=[\"pains\"]) -> Vector{Dict}\n\nComprehensive screening of multiple molecules using both property-based and SMARTS-based filters.\n\nArguments\n\nmols::Vector{Union{Molecule,Missing}}: Vector of molecules to screen\nproperty_filters::Vector{Symbol}: Property-based filters to apply\nsmarts_filters::Vector{String}: SMARTS-based filters to apply\n\nReturns\n\nVector{Dict}: Vector of screening results for each molecule\n\nExamples\n\nmols = [mol_from_smiles(\"CCO\"), mol_from_smiles(\"c1ccccc1N\")]\nresults = screen_molecules(mols; smarts_filters = [\"pains\"])\n\n\n\n\n\n","category":"function"},{"location":"api/#lipinski_ro5","page":"API Reference","title":"lipinski_ro5","text":"","category":"section"},{"location":"api/#MoleculeScreen.lipinski_ro5","page":"API Reference","title":"MoleculeScreen.lipinski_ro5","text":"lipinski_ro5(mol::Molecule) -> Bool\n\nApply Lipinski's Rule of Five filter.\n\nCompounds should satisfy at least 3 of 4 criteria:\n\nMolecular weight ≤ 500 Da\nLogP ≤ 5\nH-bond donors ≤ 5\nH-bond acceptors ≤ 10\n\nArguments\n\nmol::Molecule: Molecule to filter\n\nReturns\n\nBool: true if molecule passes (≤ 1 violation), false otherwise\n\n\n\n\n\n","category":"function"},{"location":"api/#veber_rules","page":"API Reference","title":"veber_rules","text":"","category":"section"},{"location":"api/#MoleculeScreen.veber_rules","page":"API Reference","title":"MoleculeScreen.veber_rules","text":"veber_rules(mol::Molecule) -> Bool\n\nApply Veber's rules for oral bioavailability.\n\nCriteria:\n\nRotatable bonds ≤ 10\nTopological polar surface area (TPSA) ≤ 140 Å²\n\nArguments\n\nmol::Molecule: Molecule to filter\n\nReturns\n\nBool: true if molecule passes both criteria, false otherwise\n\n\n\n\n\n","category":"function"},{"location":"api/#ghose_filter","page":"API Reference","title":"ghose_filter","text":"","category":"section"},{"location":"api/#MoleculeScreen.ghose_filter","page":"API Reference","title":"MoleculeScreen.ghose_filter","text":"ghose_filter(mol::Molecule) -> Bool\n\nApply Ghose filter for drug-like chemical space.\n\nCriteria:\n\nMW: 160–480 Da\nLogP: -0.4 to +5.6\nMolar refractivity: 40–130\nHeavy atom count: 20–70\n\nArguments\n\nmol::Molecule: Molecule to filter\n\nReturns\n\nBool: true if molecule passes all criteria, false otherwise\n\n\n\n\n\n","category":"function"},{"location":"api/#egan_filter","page":"API Reference","title":"egan_filter","text":"","category":"section"},{"location":"api/#MoleculeScreen.egan_filter","page":"API Reference","title":"MoleculeScreen.egan_filter","text":"egan_filter(mol::Molecule) -> Bool\n\nApply Egan's filter for passive permeability.\n\nCriteria:\n\nLogP ≤ 5.88\nTPSA ≤ 131 Å²\n\nArguments\n\nmol::Molecule: Molecule to filter\n\nReturns\n\nBool: true if molecule passes both criteria, false otherwise\n\n\n\n\n\n","category":"function"},{"location":"api/#muegge_filter","page":"API Reference","title":"muegge_filter","text":"","category":"section"},{"location":"api/#MoleculeScreen.muegge_filter","page":"API Reference","title":"MoleculeScreen.muegge_filter","text":"muegge_filter(mol::Molecule) -> Bool\n\nApply Muegge filter for general drug-likeness.\n\nCriteria:\n\nMW: 200–600 Da\nLogP: -2 to 5\nTPSA ≤ 150 Å²\nRotatable bonds ≤ 15\nH-bond donors ≤ 5\nH-bond acceptors ≤ 10\n\nArguments\n\nmol::Molecule: Molecule to filter\n\nReturns\n\nBool: true if molecule passes all criteria, false otherwise\n\n\n\n\n\n","category":"function"},{"location":"api/#pfizer_3_75_rule","page":"API Reference","title":"pfizer_3_75_rule","text":"","category":"section"},{"location":"api/#MoleculeScreen.pfizer_3_75_rule","page":"API Reference","title":"MoleculeScreen.pfizer_3_75_rule","text":"pfizer_3_75_rule(mol::Molecule) -> Bool\n\nApply Pfizer's 3/75 rule to identify compounds prone to safety issues.\n\nCompounds are flagged as potentially problematic if:\n\nLogP > 3 AND TPSA < 75 Å²\n\nArguments\n\nmol::Molecule: Molecule to filter\n\nReturns\n\nBool: true if molecule passes (not flagged), false if flagged as problematic\n\n\n\n\n\n","category":"function"},{"location":"api/#gsk_4_400_rule","page":"API Reference","title":"gsk_4_400_rule","text":"","category":"section"},{"location":"api/#MoleculeScreen.gsk_4_400_rule","page":"API Reference","title":"MoleculeScreen.gsk_4_400_rule","text":"gsk_4_400_rule(mol::Molecule) -> Bool\n\nApply GSK's 4/400 rule for CNS drug quality.\n\nCriteria:\n\nH-bond donors ≤ 4\nMW ≤ 400 Da\n\nArguments\n\nmol::Molecule: Molecule to filter\n\nReturns\n\nBool: true if molecule passes both criteria, false otherwise\n\n\n\n\n\n","category":"function"},{"location":"api/#golden_triangle","page":"API Reference","title":"golden_triangle","text":"","category":"section"},{"location":"api/#MoleculeScreen.golden_triangle","page":"API Reference","title":"MoleculeScreen.golden_triangle","text":"golden_triangle(mol::Molecule) -> Bool\n\nApply Golden Triangle filter for optimal ADMET properties.\n\nCriteria:\n\nLogP: -0.5 to 4.5\nMW: 200–500 Da\n\nArguments\n\nmol::Molecule: Molecule to filter\n\nReturns\n\nBool: true if molecule is in the golden triangle, false otherwise\n\n\n\n\n\n","category":"function"},{"location":"api/#apply_property_filters","page":"API Reference","title":"apply_property_filters","text":"","category":"section"},{"location":"api/#MoleculeScreen.apply_property_filters","page":"API Reference","title":"MoleculeScreen.apply_property_filters","text":"apply_property_filters(mol::Molecule; filters::Vector{Symbol}=[:lipinski]) -> Dict{Symbol, Bool}\n\nApply multiple property-based filters to a molecule.\n\nArguments\n\nmol::Molecule: Molecule to filter\nfilters::Vector{Symbol}: List of filters to apply\n\nAvailable filters:\n\n:lipinski - Lipinski's Rule of Five\n:veber - Veber's rules\n:ghose - Ghose filter\n:egan - Egan's filter\n:muegge - Muegge filter\n:pfizer - Pfizer's 3/75 rule\n:gsk - GSK's 4/400 rule\n:golden_triangle - Golden Triangle\n\nReturns\n\nDict{Symbol, Bool}: Dictionary mapping filter names to results\n\n\n\n\n\n","category":"function"},{"location":"api/#check_smarts_filter","page":"API Reference","title":"check_smarts_filter","text":"","category":"section"},{"location":"api/#MoleculeScreen.check_smarts_filter","page":"API Reference","title":"MoleculeScreen.check_smarts_filter","text":"check_smarts_filter(mol::Molecule, filter_name::String) -> Bool\n\nCheck if a molecule passes a specific SMARTS-based filter.\n\nArguments\n\nmol::Molecule: Molecule to check\nfilter_name::String: Name of the filter to apply (case-insensitive)\n\nAvailable filters (loaded from data/rules_data.csv):\n\n\"pains\" - Pan-Assay Interference Compounds\n\"elililly\" - Eli Lilly filters\n\"surechembl\" - SureChEMBL reactivity alerts\n\"mlsmr\" - MLSMR filters\n\"bms\" - Bristol-Myers Squibb filters\n\"brenk\" - Brenk filter for unwanted functional groups\n\"inpharmatica\" - Inpharmatica filters\n\"glaxo\" - GlaxoSmithKline filters\n\"lint\" - Lilly LINT filters\n\nUse get_available_smarts_filters() to see all loaded filter names.\n\nReturns\n\nBool: true if molecule passes (no alerts), false if molecule contains unwanted substructures\n\n\n\n\n\n","category":"function"},{"location":"api/#apply_smarts_filters","page":"API Reference","title":"apply_smarts_filters","text":"","category":"section"},{"location":"api/#MoleculeScreen.apply_smarts_filters","page":"API Reference","title":"MoleculeScreen.apply_smarts_filters","text":"apply_smarts_filters(mol::Molecule; filters::Vector{String}=[\"pains\"]) -> Dict{String, Any}\n\nApply multiple SMARTS-based filters to a molecule.\n\nArguments\n\nmol::Molecule: Molecule to filter\nfilters::Vector{String}: List of SMARTS filters to apply\n\nReturns\n\nDict{String, Any}: Dictionary mapping filter names to results with pass/fail status and violation descriptions\n\n\n\n\n\n","category":"function"},{"location":"api/#is_clean_molecule","page":"API Reference","title":"is_clean_molecule","text":"","category":"section"},{"location":"api/#MoleculeScreen.is_clean_molecule","page":"API Reference","title":"MoleculeScreen.is_clean_molecule","text":"is_clean_molecule(mol::Molecule; smarts_filters::Vector{String}=[\"pains\", \"brenk\"]) -> Bool\n\nCheck if a molecule is \"clean\" (passes all specified SMARTS filters).\n\nArguments\n\nmol::Molecule: Molecule to check\nsmarts_filters::Vector{String}: List of SMARTS filters to apply\n\nReturns\n\nBool: true if molecule passes all filters, false otherwise\n\n\n\n\n\n","category":"function"},{"location":"api/#get_smarts_violations","page":"API Reference","title":"get_smarts_violations","text":"","category":"section"},{"location":"api/#MoleculeScreen.get_smarts_violations","page":"API Reference","title":"MoleculeScreen.get_smarts_violations","text":"get_smarts_violations(mol::Molecule, filter_name::String) -> Vector{String}\n\nGet the specific SMARTS patterns that match in a molecule for a given filter.\n\nArguments\n\nmol::Molecule: Molecule to check\nfilter_name::String: Name of the filter to check\n\nReturns\n\nVector{String}: List of SMARTS patterns that match (violations)\n\n\n\n\n\n","category":"function"},{"location":"api/#get_smarts_violations_with_descriptions","page":"API Reference","title":"get_smarts_violations_with_descriptions","text":"","category":"section"},{"location":"api/#MoleculeScreen.get_smarts_violations_with_descriptions","page":"API Reference","title":"MoleculeScreen.get_smarts_violations_with_descriptions","text":"get_smarts_violations_with_descriptions(mol::Molecule, filter_name::String) -> Vector{NamedTuple{(:smarts, :description), Tuple{String, String}}}\n\nGet the specific SMARTS patterns that match in a molecule along with their descriptions.\n\nArguments\n\nmol::Molecule: Molecule to check\nfilter_name::String: Name of the filter to check\n\nReturns\n\nVector{NamedTuple}: List of (smarts=pattern, description=desc) named tuples for violations\n\n\n\n\n\n","category":"function"},{"location":"api/#get_available_smarts_filters","page":"API Reference","title":"get_available_smarts_filters","text":"","category":"section"},{"location":"api/#MoleculeScreen.get_available_smarts_filters","page":"API Reference","title":"MoleculeScreen.get_available_smarts_filters","text":"get_available_smarts_filters() -> Vector{String}\n\nGet a list of all available SMARTS filter names loaded from the CSV file.\n\nReturns\n\nVector{String}: List of available filter names\n\n\n\n\n\n","category":"function"},{"location":"quickstart/#Quickstart","page":"Quickstart","title":"Quickstart","text":"","category":"section"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"using MoleculeScreen\nusing MoleculeFlow\n\n# Create a molecule from SMILES\nmol = mol_from_smiles(\"CCO\")  \n\n!mol.valid\n\n# Screen with default filters\nresults = screen_molecules(mol)\nprintln(\"Molecule passes screening: \", results[\"overall_pass\"])","category":"page"},{"location":"quickstart/#Basic-Screening","page":"Quickstart","title":"Basic Screening","text":"","category":"section"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"# Single Property for a single Molecule \nmol = mol_from_smiles(\"CC(C)C1=CC(=C(C=C1)C(C)C)C(=O)C(=O)O\")  # Ibuprofen\n\nif mol.valid\n    # Test individual filters\n    println(\"Lipinski: \", lipinski_ro5(mol))\n    println(\"Veber: \", veber_rules(mol))\n    println(\"Ghose: \", ghose_filter(mol))\nend","category":"page"},{"location":"quickstart/#Advanced-Screening","page":"Quickstart","title":"Advanced Screening","text":"","category":"section"},{"location":"quickstart/","page":"Quickstart","title":"Quickstart","text":"results = screen_molecules(mol;\n    property_filters=[:lipinski, :veber],\n    smarts_filters=[\"pains\", \"brenk\"])\n\n# Result structure:\n# {\n#   \"property_filters\" => {:lipinski => true, :veber => true},\n#   \"smarts_filters\" => {\n#     \"pains\" => {\"pass\" => true, \"violations\" => []},\n#     \"brenk\" => {\"pass\" => false, \"violations\" => [(smarts=\"...\", description=\"...\")]}\n#   },\n#   \"property_pass\" => true,\n#   \"smarts_pass\" => false,\n#   \"overall_pass\" => false,\n#   \"molecule_valid\" => true\n# }","category":"page"},{"location":"examples/#Examples","page":"Examples","title":"Examples","text":"","category":"section"},{"location":"examples/#Drug-Screening-Examples","page":"Examples","title":"Drug Screening Examples","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"using MoleculeScreen\nusing MoleculeFlow\n\n# Test well-known drugs\ndrugs = [\n    (\"CCO\", \"Ethanol\"),\n    (\"CC(C)C1=CC(=C(C=C1)C(C)C)C(=O)C(=O)O\", \"Ibuprofen\"),\n    (\"CC(=O)OC1=CC=CC=C1C(=O)O\", \"Aspirin\"),\n    (\"C=CC(=O)N1CCC[C@H](C1)N2C3=C(C(=N2)C4=CC=C(C=C4)OC5=CC=CC=C5)C(=NC=N3)N\", \"Ibrutinib\")\n]\n\nfor (smiles, name) in drugs\n    mol = mol_from_smiles(smiles)\n\n    if !mol.valid\n        println(\"$name: Invalid SMILES\")\n        continue\n    end\n\n    results = screen_molecules(mol;\n        property_filters=[:lipinski, :veber],\n        smarts_filters=[\"pains\", \"brenk\"])\n\n    println(\"\\n$name:\")\n    println(\"Overall pass:\", results[\"overall_pass\"])\n    println(\"Property pass:\", results[\"property_pass\"])\n    println(\"SMARTS pass:\", results[\"smarts_pass\"])\n\n    # Show any violations\n    for (filter_name, filter_result) in results[\"smarts_filters\"]\n        if !filter_result[\"pass\"]\n            println(\"$filter_name violations:\")\n            for violation in filter_result[\"violations\"]\n                println(\"- $(violation.description)\")\n            end\n        end\n    end\nend","category":"page"},{"location":"examples/#Error-Handling-Examples","page":"Examples","title":"Error Handling Examples","text":"","category":"section"},{"location":"examples/#Robust-Pipeline","page":"Examples","title":"Robust Pipeline","text":"","category":"section"},{"location":"examples/","page":"Examples","title":"Examples","text":"function production_screening(smiles_list; log_errors=true)\n    results = []\n    errors = []\n\n    for (i, smiles) in enumerate(smiles_list)\n        try\n            mol = mol_from_smiles(smiles)\n\n            if !mol.valid\n                error_msg = \"Invalid SMILES: $smiles\"\n                if log_errors\n                    push!(errors, (index=i, smiles=smiles, error=error_msg))\n                end\n                continue\n            end\n\n            result = screen_molecules(mol;\n                property_filters=[:lipinski, :veber],\n                smarts_filters=[\"pains\", \"brenk\"])\n\n            result[\"index\"] = i\n            result[\"smiles\"] = smiles\n            push!(results, result)\n\n        catch e\n            error_msg = \"Processing error for $smiles: $(string(e))\"\n            if log_errors\n                push!(errors, (index=i, smiles=smiles, error=error_msg))\n            end\n            println(\"Warning: $error_msg\")\n        end\n    end\n\n    return (results=results, errors=errors)\nend\n\ntest_smiles = [\"CCO\", \"INVALID\", \"c1ccccc1\", \"ERROR_PRONE_SMILES\"]\nscreening_output = production_screening(test_smiles)\n\nprintln(\"Successfully screened: $(length(screening_output.results)) molecules\")\nprintln(\"Errors encountered: $(length(screening_output.errors))\")\n\nfor error in screening_output.errors\n    println(\"Error at index $(error.index): $(error.error)\")\nend","category":"page"},{"location":"#MoleculeScreen.jl","page":"Home","title":"MoleculeScreen.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"A Julia package for comprehensive molecular filtering and screening.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(\"MoleculeScreen\")","category":"page"}]
}
